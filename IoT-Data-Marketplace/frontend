import { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Search, ShoppingCart, Database, Clock, Tag, User, Info, ChevronDown, ChevronUp, ArrowRight, BarChart2 } from 'lucide-react';

// Mock data for demonstration
const mockDataSets = [
  { id: 1, name: "Smart Home Energy Consumption", provider: "EnergyTech", category: "Energy", sensors: 157, updateFrequency: "5 min", price: 0.05, rating: 4.8, description: "Real-time energy consumption data from smart homes across the country." },
  { id: 2, name: "Agricultural Soil Moisture", provider: "FarmInsights", category: "Agriculture", sensors: 312, updateFrequency: "1 hour", price: 0.02, rating: 4.5, description: "Soil moisture readings from sensors placed in agricultural fields." },
  { id: 3, name: "Urban Air Quality Index", provider: "CleanAirNow", category: "Environment", sensors: 89, updateFrequency: "10 min", price: 0.04, rating: 4.7, description: "Air quality measurements from urban centers worldwide." },
  { id: 4, name: "Traffic Flow Patterns", provider: "SmartCities", category: "Transportation", sensors: 215, updateFrequency: "1 min", price: 0.08, rating: 4.3, description: "Real-time traffic flow data from major metropolitan areas." },
  { id: 5, name: "Industrial Machine Health", provider: "IndustryIoT", category: "Manufacturing", sensors: 467, updateFrequency: "30 sec", price: 0.10, rating: 4.9, description: "Health metrics from industrial machinery in manufacturing plants." },
];

const mockChartData = [
  { timestamp: '00:00', value: 24 },
  { timestamp: '04:00', value: 21 },
  { timestamp: '08:00', value: 58 },
  { timestamp: '12:00', value: 63 },
  { timestamp: '16:00', value: 48 },
  { timestamp: '20:00', value: 30 },
  { timestamp: '24:00', value: 26 },
];

const mockUserStats = {
  myData: { count: 2, revenue: 1.2 },
  purchases: { count: 3, spent: 0.17 },
  balance: 5.43
};

const mockCategories = [
  "Energy", "Agriculture", "Environment", "Transportation", "Manufacturing", 
  "Healthcare", "Smart Cities", "Consumer", "Retail", "Weather"
];

export default function IoTDataMarketplace() {
  const [searchTerm, setSearchTerm] = useState('');
  const [cart, setCart] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [selectedDataSet, setSelectedDataSet] = useState(null);
  const [activeTab, setActiveTab] = useState('browse');
  const [expanded, setExpanded] = useState({});
  const [isConnected, setIsConnected] = useState(false);
  const [walletAddress, setWalletAddress] = useState('');

  // Filter data based on search term and category
  const filteredData = mockDataSets.filter(dataset => {
    const matchesSearch = dataset.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
                          dataset.provider.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'All' || dataset.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const toggleExpand = (id) => {
    setExpanded(prev => ({
      ...prev,
      [id]: !prev[id]
    }));
  };

  const addToCart = (dataset) => {
    if (!cart.some(item => item.id === dataset.id)) {
      setCart([...cart, dataset]);
    }
  };

  const removeFromCart = (id) => {
    setCart(cart.filter(item => item.id !== id));
  };

  const connectWallet = () => {
    // Mock wallet connection
    const mockAddress = '0x' + Math.random().toString(16).substr(2, 40);
    setWalletAddress(mockAddress);
    setIsConnected(true);
  };

  const checkout = () => {
    alert(`Processing purchase of ${cart.length} datasets...`);
    // Here you would integrate with your smart contract
    setCart([]);
  };

  const viewDataDetails = (dataset) => {
    setSelectedDataSet(dataset);
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-600 to-indigo-800 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center">
            <Database className="mr-2" />
            <h1 className="text-2xl font-bold">IoT Data Marketplace</h1>
          </div>
          
          <div className="flex items-center">
            {isConnected ? (
              <div className="bg-blue-800 py-1 px-3 rounded-full text-sm">
                {walletAddress.substring(0, 6)}...{walletAddress.substring(38)}
              </div>
            ) : (
              <button 
                onClick={connectWallet} 
                className="bg-white text-blue-700 px-4 py-1 rounded-full text-sm font-medium hover:bg-blue-50"
              >
                Connect Wallet
              </button>
            )}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto flex-1 p-4">
        {/* Tabs */}
        <div className="flex border-b mb-6">
          <button 
            className={`px-4 py-2 font-medium ${activeTab === 'browse' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`} 
            onClick={() => setActiveTab('browse')}
          >
            Browse Data
          </button>
          <button 
            className={`px-4 py-2 font-medium ${activeTab === 'mydata' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`} 
            onClick={() => setActiveTab('mydata')}
          >
            My Dashboard
          </button>
          <button 
            className={`px-4 py-2 font-medium ${activeTab === 'cart' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`} 
            onClick={() => setActiveTab('cart')}
          >
            Cart ({cart.length})
          </button>
        </div>

        {activeTab === 'browse' && (
          <div>
            {/* Search and Filter */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="col-span-2 relative">
                <input
                  type="text"
                  placeholder="Search data sets..."
                  className="w-full p-2 pl-10 border rounded shadow-sm"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                <Search className="absolute left-3 top-2.5 text-gray-400" size={20} />
              </div>
              <select
                className="p-2 border rounded shadow-sm"
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
              >
                <option value="All">All Categories</option>
                {mockCategories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
            </div>

            {/* Detail View */}
            {selectedDataSet ? (
              <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                <div className="flex justify-between items-start">
                  <div>
                    <h2 className="text-2xl font-bold">{selectedDataSet.name}</h2>
                    <p className="text-sm text-gray-500 mb-2">Provided by {selectedDataSet.provider}</p>
                  </div>
                  <button 
                    onClick={() => setSelectedDataSet(null)} 
                    className="text-gray-500 hover:text-gray-700"
                  >
                    âœ•
                  </button>
                </div>
                
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-4">
                  <div>
                    <p className="text-gray-700 mb-4">{selectedDataSet.description}</p>
                    
                    <div className="grid grid-cols-2 gap-4 mb-6">
                      <div className="bg-gray-50 p-3 rounded">
                        <p className="text-sm text-gray-500">Category</p>
                        <p className="font-medium">{selectedDataSet.category}</p>
                      </div>
                      <div className="bg-gray-50 p-3 rounded">
                        <p className="text-sm text-gray-500">Active Sensors</p>
                        <p className="font-medium">{selectedDataSet.sensors}</p>
                      </div>
                      <div className="bg-gray-50 p-3 rounded">
                        <p className="text-sm text-gray-500">Update Frequency</p>
                        <p className="font-medium">{selectedDataSet.updateFrequency}</p>
                      </div>
                      <div className="bg-gray-50 p-3 rounded">
                        <p className="text-sm text-gray-500">Rating</p>
                        <p className="font-medium">{selectedDataSet.rating}/5.0</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-4">
                      <div className="text-xl font-bold text-blue-600">{selectedDataSet.price} ETH</div>
                      <span className="text-gray-500 text-sm">per data point</span>
                      <button 
                        onClick={() => addToCart(selectedDataSet)} 
                        className="ml-auto bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center"
                      >
                        <ShoppingCart size={18} className="mr-2" /> Add to Cart
                      </button>
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h3 className="text-lg font-medium mb-4">Sample Data Preview</h3>
                    <ResponsiveContainer width="100%" height={200}>
                      <LineChart data={mockChartData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="timestamp" />
                        <YAxis />
                        <Tooltip />
                        <Line type="monotone" dataKey="value" stroke="#3B82F6" strokeWidth={2} />
                      </LineChart>
                    </ResponsiveContainer>
                    <div className="mt-4">
                      <p className="text-sm text-gray-500">This is sample historical data for demonstration purposes.</p>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              /* Data List */
              <div className="space-y-4">
                {filteredData.length > 0 ? (
                  filteredData.map(dataset => (
                    <div key={dataset.id} className="bg-white rounded-lg shadow-md overflow-hidden">
                      <div className="p-4">
                        <div className="flex justify-between items-start">
                          <div>
                            <h3 className="text-lg font-medium">{dataset.name}</h3>
                            <p className="text-sm text-gray-500">Provided by {dataset.provider}</p>
                          </div>
                          <div className="text-lg font-bold text-blue-600">{dataset.price} ETH</div>
                        </div>
                        
                        <div className="mt-2 flex flex-wrap gap-2">
                          <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full flex items-center">
                            <Tag size={12} className="mr-1" /> {dataset.category}
                          </span>
                          <span className="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded-full flex items-center">
                            <Database size={12} className="mr-1" /> {dataset.sensors} sensors
                          </span>
                          <span className="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded-full flex items-center">
                            <Clock size={12} className="mr-1" /> {dataset.updateFrequency}
                          </span>
                        </div>
                        
                        {expanded[dataset.id] && (
                          <p className="mt-3 text-gray-600 text-sm">{dataset.description}</p>
                        )}
                        
                        <div className="mt-4 flex items-center justify-between">
                          <button 
                            onClick={() => toggleExpand(dataset.id)} 
                            className="text-gray-500 text-sm flex items-center"
                          >
                            {expanded[dataset.id] ? (
                              <>Less info <ChevronUp size={16} className="ml-1" /></>
                            ) : (
                              <>More info <ChevronDown size={16} className="ml-1" /></>
                            )}
                          </button>
                          
                          <div className="flex space-x-2">
                            <button 
                              onClick={() => viewDataDetails(dataset)} 
                              className="border border-blue-600 text-blue-600 hover:bg-blue-50 px-3 py-1 rounded-md text-sm"
                            >
                              Details
                            </button>
                            <button 
                              onClick={() => addToCart(dataset)} 
                              className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-md text-sm flex items-center"
                            >
                              <ShoppingCart size={14} className="mr-1" /> Add
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-8">
                    <p className="text-gray-500">No data sets found matching your criteria.</p>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {activeTab === 'mydata' && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="col-span-2">
              <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                <h2 className="text-xl font-bold mb-4">Your IoT Data Dashboard</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h3 className="text-sm text-gray-500">Wallet Balance</h3>
                    <p className="text-2xl font-bold text-blue-600">{mockUserStats.balance} ETH</p>
                  </div>
                  <div className="bg-green-50 p-4 rounded-lg">
                    <h3 className="text-sm text-gray-500">My Data Streams</h3>
                    <p className="text-2xl font-bold text-green-600">{mockUserStats.myData.count}</p>
                    <p className="text-sm text-gray-500">{mockUserStats.myData.revenue} ETH earned</p>
                  </div>
                  <div className="bg-purple-50 p-4 rounded-lg">
                    <h3 className="text-sm text-gray-500">Purchased Access</h3>
                    <p className="text-2xl font-bold text-purple-600">{mockUserStats.purchases.count}</p>
                    <p className="text-sm text-gray-500">{mockUserStats.purchases.spent} ETH spent</p>
                  </div>
                </div>

                <div className="mb-6">
                  <h3 className="text-lg font-medium mb-3">Recent Activity</h3>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <ResponsiveContainer width="100%" height={200}>
                      <LineChart data={mockChartData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="timestamp" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Line type="monotone" dataKey="value" name="Data Points Accessed" stroke="#3B82F6" strokeWidth={2} />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium mb-3">Your Data Streams</h3>
                  {mockUserStats.myData.count > 0 ? (
                    <div className="space-y-3">
                      <div className="bg-white border rounded-lg p-4">
                        <div className="flex justify-between items-center">
                          <div>
                            <h4 className="font-medium">Smart Home Energy Readings</h4>
                            <p className="text-sm text-gray-500">15 active subscribers</p>
                          </div>
                          <div className="text-green-600 font-medium">+0.75 ETH</div>
                        </div>
                      </div>
                      <div className="bg-white border rounded-lg p-4">
                        <div className="flex justify-between items-center">
                          <div>
                            <h4 className="font-medium">Weather Station Data</h4>
                            <p className="text-sm text-gray-500">8 active subscribers</p>
                          </div>
                          <div className="text-green-600 font-medium">+0.45 ETH</div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-8 bg-gray-50 rounded-lg">
                      <p className="text-gray-500">You haven't published any data streams yet.</p>
                      <button className="mt-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">
                        Publish New Data Stream
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            <div>
              <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                <h3 className="text-lg font-medium mb-4">Publish New Data Stream</h3>
                <p className="text-gray-600 text-sm mb-4">
                  Create a new data stream to monetize your IoT device data on the marketplace.
                </p>
                <button className="w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded flex items-center justify-center">
                  <Database size={18} className="mr-2" /> Create New Stream
                </button>
              </div>
              
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-lg font-medium mb-4">Your Purchased Data</h3>
                {mockUserStats.purchases.count > 0 ? (
                  <div className="space-y-3">
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <p className="font-medium">Urban Air Quality Index</p>
                      <p className="text-xs text-gray-500">Access expires in 28 days</p>
                    </div>
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <p className="font-medium">Traffic Flow Patterns</p>
                      <p className="text-xs text-gray-500">Access expires in 14 days</p>
                    </div>
                    <div className="bg-gray-50 p-3 rounded-lg">
                      <p className="font-medium">Agricultural Soil Moisture</p>
                      <p className="text-xs text-gray-500">Access expires in 7 days</p>
                    </div>
                  </div>
                ) : (
                  <p className="text-gray-500 text-center py-4">No purchased data streams yet.</p>
                )}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'cart' && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-bold mb-4">Your Cart</h2>
            
            {cart.length > 0 ? (
              <>
                <div className="space-y-4 mb-6">
                  {cart.map(item => (
                    <div key={item.id} className="flex justify-between items-center border-b pb-4">
                      <div>
                        <h3 className="font-medium">{item.name}</h3>
                        <p className="text-sm text-gray-500">by {item.provider}</p>
                      </div>
                      <div className="flex items-center space-x-4">
                        <p className="font-bold">{item.price} ETH</p>
                        <button 
                          onClick={() => removeFromCart(item.id)} 
                          className="text-red-500 hover:text-red-700"
                        >
                          Remove
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg mb-6">
                  <div>
                    <p className="text-sm text-gray-500">Total</p>
                    <p className="text-xl font-bold">
                      {cart.reduce((sum, item) => sum + item.price, 0).toFixed(2)} ETH
                    </p>
                  </div>
                  <button 
                    onClick={checkout} 
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded flex items-center"
                    disabled={!isConnected}
                  >
                    {isConnected ? (
                      <>Checkout <ArrowRight size={18} className="ml-2" /></>
                    ) : (
                      <>Connect Wallet First</>
                    )}
                  </button>
                </div>
                
                <div className="text-sm text-gray-500">
                  <p>
                    <Info size={14} className="inline mr-1" /> 
                    By purchasing data, you agree to the terms of service and data usage policies.
                  </p>
                </div>
              </>
            ) : (
              <div className="text-center py-8">
                <ShoppingCart size={48} className="mx-auto text-gray-300 mb-4" />
                <p className="text-gray-500">Your cart is empty.</p>
                <button 
                  onClick={() => setActiveTab('browse')} 
                  className="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
                >
                  Browse Data Marketplace
                </button>
              </div>
            )}
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-gray-800 text-gray-300 p-6">
        <div className="container mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div>
              <h3 className="text-lg font-medium mb-2">IoT Data Marketplace</h3>
              <p className="text-sm">Buy and sell IoT sensor data securely on the blockchain.</p>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Quick Links</h3>
              <ul className="text-sm space-y-2">
                <li><a href="#" className="hover:text-white">About</a></li>
                <li><a href="#" className="hover:text-white">API Documentation</a></li>
                <li><a href="#" className="hover:text-white">Terms of Service</a></li>
                <li><a href="#" className="hover:text-white">Privacy Policy</a></li>
              </ul>
            </div>
            <div>
              <h3 className="text-lg font-medium mb-2">Connect</h3>
              <p className="text-sm mb-2">Join our community of IoT data providers and consumers.</p>
              <div className="flex space-x-4">
                <a href="#" className="hover:text-white">GitHub</a>
                <a href="#" className="hover:text-white">Discord</a>
                <a href="#" className="hover:text-white">Twitter</a>
              </div>
            </div>
          </div>
          <div className="mt-8 pt-4 border-t border-gray-700 text-sm text-center">
            <p>&copy; 2025 IoT Data Marketplace. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
